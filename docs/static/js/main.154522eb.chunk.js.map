{"version":3,"sources":["StateTable.js","App.js","serviceWorker.js","index.js"],"names":["StateTable","props","removeState","index","state","states","delete","setState","onNameChange","e","get","name","target","value","onAcceptChange","isAccept","checked","Map","addState","bind","keys","Array","from","this","size","length","set","transitions","className","onClick","map","accept","onRemove","React","Component","StateEntry","type","onChange","for","defaultValue","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAEMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,YAAc,SAACC,GAAD,OAAW,WACvB,EAAKC,MAAMC,OAAOC,OAAOH,GACzB,EAAKI,SAAS,CAAEF,OAAQ,EAAKD,MAAMC,WArBlB,EAwBnBG,aAAe,SAACL,GAAD,OAAW,SAACM,GACzB,EAAKL,MAAMC,OAAOK,IAAIP,GAAOQ,KAAOF,EAAEG,OAAOC,MAC7C,EAAKN,SAAS,CAAEF,OAAQ,EAAKD,MAAMC,WA1BlB,EA6BnBS,eAAiB,SAACX,GAAD,OAAW,SAACM,GAC3B,EAAKL,MAAMC,OAAOK,IAAIP,GAAOY,SAAWN,EAAEG,OAAOI,QACjD,EAAKT,SAAS,CAAEF,OAAQ,EAAKD,MAAMC,WA7BnC,EAAKD,MAAQ,CAAEC,OAAQ,IAAIY,KAC3B,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKjB,YAAc,EAAKA,YAAYiB,KAAjB,gBAJF,E,uDAQjB,IAAIC,EAAOC,MAAMC,KAAKC,KAAKnB,MAAMC,OAAOe,QACpCjB,EAAmC,IAA3BoB,KAAKnB,MAAMC,OAAOmB,KAAa,EAAIJ,EAAKA,EAAKK,OAAS,GAAK,EACvEF,KAAKhB,SAAS,CACZF,OAAQkB,KAAKnB,MAAMC,OAAOqB,IAAIvB,EAAO,CACnCQ,KAAM,YACNI,UAAU,EACVY,YAAa,S,+BAoBT,IAAD,OACP,OACE,2BAAOC,UAAU,eACf,qCACS,IACP,4BAAQA,UAAU,YAAYC,QAASN,KAAKL,UAA5C,MAIF,+BACGG,MAAMC,KAAKC,KAAKnB,MAAMC,OAAOe,QAAQU,KAAI,SAAC3B,GACzC,IAAIC,EAAQ,EAAKA,MAAMC,OAAOK,IAAIP,GAElC,OACE,kBAAC,EAAD,CACEA,MAAOA,EACPQ,KAAMP,EAAMO,KACZoB,OAAQ3B,EAAMW,SACdY,YAAavB,EAAMuB,YACnBK,SAAU,EAAK9B,YAAYC,GAC3BK,aAAc,EAAKA,aAAaL,GAChCW,eAAgB,EAAKA,eAAeX,c,GAxD3B8B,IAAMC,WAkEzBC,E,uKAEF,OACE,wBAAIP,UAAU,aACZ,2BACEQ,KAAK,WACLzB,KAAK,SACL0B,SAAUd,KAAKtB,MAAMa,iBAEvB,2BAAOwB,IAAI,UAAX,oBACA,2BACEF,KAAK,OACLG,aAAchB,KAAKtB,MAAMU,KACzB0B,SAAUd,KAAKtB,MAAMO,eAEvB,4BAAQqB,QAASN,KAAKtB,MAAM+B,UAA5B,U,GAfiBC,IAAMC,WAqBhBlC,I,MC7EAwC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.154522eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass StateTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { states: new Map() };\r\n    this.addState = this.addState.bind(this);\r\n    this.removeState = this.removeState.bind(this);\r\n  }\r\n\r\n  addState() {\r\n    let keys = Array.from(this.state.states.keys());\r\n    let index = this.state.states.size === 0 ? 0 : keys[keys.length - 1] + 1;\r\n    this.setState({\r\n      states: this.state.states.set(index, {\r\n        name: 'New State',\r\n        isAccept: false,\r\n        transitions: {},\r\n      }),\r\n    });\r\n  }\r\n\r\n  removeState = (index) => () => {\r\n    this.state.states.delete(index);\r\n    this.setState({ states: this.state.states });\r\n  };\r\n\r\n  onNameChange = (index) => (e) => {\r\n    this.state.states.get(index).name = e.target.value;\r\n    this.setState({ states: this.state.states });\r\n  };\r\n\r\n  onAcceptChange = (index) => (e) => {\r\n    this.state.states.get(index).isAccept = e.target.checked;\r\n    this.setState({ states: this.state.states });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <table className='State-Table'>\r\n        <th>\r\n          States{' '}\r\n          <button className='Add-State' onClick={this.addState}>\r\n            +\r\n          </button>\r\n        </th>\r\n        <tbody>\r\n          {Array.from(this.state.states.keys()).map((index) => {\r\n            let state = this.state.states.get(index);\r\n\r\n            return (\r\n              <StateEntry\r\n                index={index}\r\n                name={state.name}\r\n                accept={state.isAccept}\r\n                transitions={state.transitions}\r\n                onRemove={this.removeState(index)}\r\n                onNameChange={this.onNameChange(index)}\r\n                onAcceptChange={this.onAcceptChange(index)}\r\n              />\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nclass StateEntry extends React.Component {\r\n  render() {\r\n    return (\r\n      <tr className='State-Row'>\r\n        <input\r\n          type='checkbox'\r\n          name='accept'\r\n          onChange={this.props.onAcceptChange}\r\n        />\r\n        <label for='accept'>Is Accept State?</label>\r\n        <input\r\n          type='text'\r\n          defaultValue={this.props.name}\r\n          onChange={this.props.onNameChange}\r\n        />\r\n        <button onClick={this.props.onRemove}>X</button>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StateTable;\r\n","import React from 'react';\nimport StateTable from './StateTable';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <StateTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}